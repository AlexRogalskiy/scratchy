generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid()) @db.Uuid
  email                  String                  @unique @db.VarChar(255)
  isEmailConfirmed       Boolean                 @default(false)
  passwordHash           String?                 @db.VarChar(255)
  firstName              String?                 @db.VarChar(255)
  lastName               String?                 @db.VarChar(255)
  lastHeartbeatAt        DateTime?               @db.Timestamp(6)
  lastLoginAt            DateTime?               @db.Timestamp(6)
  lastLoginIP            String?                 @db.Inet
  createdIP              String                  @db.Inet
  createdAt              DateTime                @default(now()) @db.Timestamp(6)
  updatedAt              DateTime?               @updatedAt
  tokenVersion           Int                     @default(0)
  emailConfirmationToken EmailConfirmationToken?
  forgotPasswordToken    ForgotPasswordToken?
  providers              UserProvider[]
  permissions            UserPermission[]
  roles                  UserRole[]
  fileUploads            FileUpload[]

  @@index([email])
}

enum Provider {
  facebook
  github
  google
}

model UserProvider {
  id       String   @id @db.VarChar(255)
  provider Provider
  userId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id])

  @@unique([provider, id])
  @@unique([userId, provider])
  @@index([userId])
}

model FileUpload {
  id           String   @id @db.Uuid
  originalName String   @db.VarChar(255)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model EmailConfirmationToken {
  id        String   @id @db.Uuid
  expiresAt DateTime @db.Timestamp(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ForgotPasswordToken {
  id        String   @id @db.Uuid
  expiresAt DateTime @db.Timestamp(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  userRole        UserRole[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  permissionId Int
  roleId       Int
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model UserPermission {
  permissionId Int
  userId       String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  roleId       Int?
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role?      @relation(fields: [roleId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, permissionId])
}

model UserRole {
  roleId    Int
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}
